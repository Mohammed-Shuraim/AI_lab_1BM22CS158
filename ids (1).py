# -*- coding: utf-8 -*-
"""IDS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w5m_r-Ga63tkdNNqpmHIT66RoqdGrLnv

Iterative Deepening Search (IDS)
"""

def iterative_deepening_search(root, goal):
    depth = 0
    while True:
        result = depth_limited_search(root, goal, depth)
        if result == "Goal Found":
            return "Goal Found"
        if result == "Cutoff":
            depth += 1
        else:
            return "Failure"


def depth_limited_search(node, goal, limit):
    if node == goal:
        return "Goal Found"
    elif limit == 0:
        return "Cutoff"
    else:
        cutoff_occurred = False
        for child in node.children:
            result = depth_limited_search(child, goal, limit - 1)
            if result == "Cutoff":
                cutoff_occurred = True
            elif result == "Goal Found":
                return "Goal Found"
        if cutoff_occurred:
            return "Cutoff"
        else:
            return "Failure"


class Node:
    def __init__(self, value):
        self.value = value
        self.children = []

    def add_child(self, child):
        self.children.append(child)


root = Node('S')
a = Node('A')
b = Node('B')
c = Node('C')
d = Node('D')
goal_node = Node('J')


root.add_child(a)
root.add_child(b)
a.add_child(c)
a.add_child(d)
b.add_child(goal_node)


print(iterative_deepening_search(root, goal_node))